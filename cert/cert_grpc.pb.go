// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cert

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CertServiceClient is the client API for CertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CertServiceClient interface {
	SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	Issue(ctx context.Context, in *DomainInfo, opts ...grpc.CallOption) (CertService_IssueClient, error)
	RequestKey(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*Key, error)
}

type certServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCertServiceClient(cc grpc.ClientConnInterface) CertServiceClient {
	return &certServiceClient{cc}
}

func (c *certServiceClient) SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/cert.CertService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *certServiceClient) Issue(ctx context.Context, in *DomainInfo, opts ...grpc.CallOption) (CertService_IssueClient, error) {
	stream, err := c.cc.NewStream(ctx, &CertService_ServiceDesc.Streams[0], "/cert.CertService/Issue", opts...)
	if err != nil {
		return nil, err
	}
	x := &certServiceIssueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CertService_IssueClient interface {
	Recv() (*Cert, error)
	grpc.ClientStream
}

type certServiceIssueClient struct {
	grpc.ClientStream
}

func (x *certServiceIssueClient) Recv() (*Cert, error) {
	m := new(Cert)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *certServiceClient) RequestKey(ctx context.Context, in *KeyRequest, opts ...grpc.CallOption) (*Key, error) {
	out := new(Key)
	err := c.cc.Invoke(ctx, "/cert.CertService/RequestKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CertServiceServer is the server API for CertService service.
// All implementations must embed UnimplementedCertServiceServer
// for forward compatibility
type CertServiceServer interface {
	SayHello(context.Context, *Message) (*Message, error)
	Issue(*DomainInfo, CertService_IssueServer) error
	RequestKey(context.Context, *KeyRequest) (*Key, error)
	mustEmbedUnimplementedCertServiceServer()
}

// UnimplementedCertServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCertServiceServer struct {
}

func (UnimplementedCertServiceServer) SayHello(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedCertServiceServer) Issue(*DomainInfo, CertService_IssueServer) error {
	return status.Errorf(codes.Unimplemented, "method Issue not implemented")
}
func (UnimplementedCertServiceServer) RequestKey(context.Context, *KeyRequest) (*Key, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestKey not implemented")
}
func (UnimplementedCertServiceServer) mustEmbedUnimplementedCertServiceServer() {}

// UnsafeCertServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CertServiceServer will
// result in compilation errors.
type UnsafeCertServiceServer interface {
	mustEmbedUnimplementedCertServiceServer()
}

func RegisterCertServiceServer(s grpc.ServiceRegistrar, srv CertServiceServer) {
	s.RegisterService(&CertService_ServiceDesc, srv)
}

func _CertService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cert.CertService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertServiceServer).SayHello(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _CertService_Issue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DomainInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CertServiceServer).Issue(m, &certServiceIssueServer{stream})
}

type CertService_IssueServer interface {
	Send(*Cert) error
	grpc.ServerStream
}

type certServiceIssueServer struct {
	grpc.ServerStream
}

func (x *certServiceIssueServer) Send(m *Cert) error {
	return x.ServerStream.SendMsg(m)
}

func _CertService_RequestKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CertServiceServer).RequestKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cert.CertService/RequestKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CertServiceServer).RequestKey(ctx, req.(*KeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CertService_ServiceDesc is the grpc.ServiceDesc for CertService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CertService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cert.CertService",
	HandlerType: (*CertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _CertService_SayHello_Handler,
		},
		{
			MethodName: "RequestKey",
			Handler:    _CertService_RequestKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Issue",
			Handler:       _CertService_Issue_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cert/cert.proto",
}
